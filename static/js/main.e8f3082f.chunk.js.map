{"version":3,"sources":["api/api.tsx","ducks/historyReducer.tsx","components/dataentry/DataEntry.tsx","components/historydisplay/HistoryDisplay.tsx","components/maindisplay/MainDisplay.tsx","components/secondarydisplay/SecondaryDisplay.tsx","components/pokedex/Pokedex.tsx","App.tsx","store.tsx","index.tsx"],"names":["URL","searchByName","name","a","fetch","toLowerCase","data","json","dataJson","getDetailsById","id","initialHistoryState","history","ADD_HISTORY_ENTRY","addHistoryEntry","entry","type","payload","DataEntry","setSearch","handleSearch","className","placeholder","autoFocus","onChange","e","target","value","onKeyDown","key","onClick","HistoryDisplay","length","map","MainDisplay","pkmnData","speciesData","types","moves","abilities","join","src","sprites","front_default","alt","color","has_gender_differences","toString","varieties","move","TopDecorations","BottomDecorations","SecondaryDisplay","evolutionChain","locationAreas","evolution","tabIndex","onKeyUp","image","location","Pokedex","useSelector","store","dispatch","useDispatch","useState","search","pokemonData","setPokemonData","setSpeciesData","setEvolutionChain","setTypes","setMoves","setAbilities","setLocationAreas","getAbilities","Promise","all","ability","url","info","nameEn","names","filter","language","abilityInfo","getMoves","moveInfo","getLocationInfo","locUrl","locationInfo","listOfLocations","location_area","split","getEvolutionChainByURL","getEvolutionInfo","evoInfo","useEffect","then","response","location_area_encounters","pokemonChain","addEvolutionToArray","chain","push","species","evolves_to","evolution_chain","param","searchResult","includes","TopPanelDecorations","BottomPanelDecorations","App","configureStore","reducer","state","action","reverse","middleware","createLogger","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e8f3082f.chunk.js","sourcesContent":["import { Pokemon } from \"../interfaces/Pokemon\";\nimport { PokemonSpecies } from \"../interfaces/PokemonSpecies\";\n\nconst URL = 'https://pokeapi.co/api/v2'\n\nconst searchByName = async (name: string): Promise<Pokemon> => {\n    const data = await fetch(`${URL}/pokemon/${name.toLowerCase()}`)\n    const dataJson = await data.json();  \n    return dataJson;\n}\n\nconst getDetailsById = async (id: number): Promise<PokemonSpecies> => {\n    const data = await fetch(`${URL}/pokemon-species/${id}`)\n    const dataJson = await data.json();  \n    return dataJson;\n}\n\n\n\nexport {getDetailsById, searchByName}","import { AnyAction } from 'redux'\n\ninterface HistoryState {\n    history: Array<string>\n}\n\n// Initial State\nconst initialHistoryState: HistoryState = {\n    history: [],\n}\n\n// Reducer\nexport default function historyReducer(state: HistoryState = initialHistoryState, action: AnyAction) {\n    switch (action.type) {\n        case ADD_HISTORY_ENTRY: {\n            return {\n                history: [\n                    ...state.history, \n                    action.payload,\n                ].reverse(),\n            }\n        }\n    default:\n       return state\n    }\n}\n\n// Action Types\nconst ADD_HISTORY_ENTRY = \"ADD_HISTORY_ENTRY\"\n\ntype AddHistoryEvent = {\n    type: typeof ADD_HISTORY_ENTRY;\n    payload: string;\n}\n// Actions\nconst addHistoryEntry = (entry: string): AddHistoryEvent => ({\n    type: ADD_HISTORY_ENTRY,\n    payload: entry\n})\n\nexport { addHistoryEntry }\n","import './DataEntry.scss'\n\ninterface DataEntryInterface {\n    setSearch: (pkmn: string) => void;\n    handleSearch: (pkmn?: string) => void;\n}\n\nconst DataEntry = ({setSearch, handleSearch}: DataEntryInterface)=> {\n    return (\n        <div className=\"data-entry\">\n            <input \n                placeholder={'Search for Pokemon'}\n                autoFocus\n                type='text' \n                onChange={(e) => setSearch(e.target.value)} \n                onKeyDown={e => e.key===\"Enter\" && handleSearch()}\n                className='pokedex-input'\n            />\n            <button onClick={() => handleSearch()} />\n        </div>\n    );\n}\n\nexport default DataEntry;\n","import './HistoryDisplay.scss'\n\ninterface PokedexInterface {\n    history: Array<string>,\n    handleSearch: (pkmn: string) => void;\n}\n\nconst HistoryDisplay = ({history, handleSearch}: PokedexInterface)=> {\n   \n    return (\n        <>\n            <span className=\"history-title\">\n                {'Recent Successful Identifications'}\n            </span>\n            <div className=\"history-box\">\n                {history && history.length > 0 && (\n                    history.map((entry) => <button onClick={()=> handleSearch(entry)} key={entry}>{entry}</button>)\n                )}\n                {history && history.length === 0 && <span className='no-history'>No recent identifications</span>}\n            </div>\n        </>  \n    );\n}\n\nexport default HistoryDisplay;\n","import { Pokemon } from '../../interfaces/Pokemon';\nimport { PokemonSpecies } from '../../interfaces/PokemonSpecies';\nimport './MainDisplay.scss';\n\ninterface MainDisplayInterface {\n    pkmnData?: Pokemon;\n    speciesData?: PokemonSpecies;\n    types?: Array<string>;\n    moves?: Array<string>;\n    abilities?: Array<string>;\n}\n\nconst MainDisplay = ({pkmnData, speciesData, types, moves, abilities}: MainDisplayInterface)=> {\n    return (\n        <div className=\"display\">\n            <TopDecorations />\n            \n            <div className=\"display-inner\">\n                <span className=\"poke-name\">{pkmnData?.name}</span>\n                <span className=\"poke-type\">{speciesData && 'Type: '}{pkmnData && types?.join(\", \")}</span>\n                <img src={pkmnData?.sprites.front_default} alt={pkmnData?.name} />\n\n                <div className=\"panels\">\n                    <div className=\"left-panel\">\n                        {speciesData && 'Color:'} {speciesData?.color.name}\n                        <br />\n                        {speciesData && 'Multiple genders:'} {speciesData?.has_gender_differences.toString()}\n                        <br />\n                        {speciesData && `No. of varieties: ${speciesData?.varieties.length}`}\n                        <br />\n                        {pkmnData && 'Abilities: '}{abilities && abilities.join(\", \")}\n                    </div>\n\n                    <div className=\"right-panel\">\n                        { moves && (\n                            <>\n                                Moves:\n                                <div className='move-box'>\n                                    { moves && moves.map((move: string)=> <li key={move}>{move}</li>) }\n                                </div>\n                            </>\n                        )}\n                    </div>\n                </div>\n            </div>\n            <BottomDecorations />\n            \n        </div>\n    );\n}\n\nexport default MainDisplay;\n\nconst TopDecorations = () => (\n    <div className=\"top-decorations\">\n        <div className=\"red-light small-button\" />\n        <div className=\"red-light small-button\" />\n    </div>\n)\nconst BottomDecorations = () => (\n    <div className=\"bottom-decorations\">\n        <div className=\"redlight small-button\" />\n        <div className=\"voicebars\">\n            <span className=\"line\" />\n            <span className=\"line\" />\n            <span className=\"line\" />\n            <span className=\"line\" />\n        </div>\n    </div>\n)\n","import { EvolutionChainEntry } from '../../interfaces/EvolutionChainEntry';\nimport './SecondaryDisplay.scss';\n\ninterface SecondaryDisplayInterface {\n    name?: string;\n    evolutionChain?: Array<EvolutionChainEntry>;\n    locationAreas?: Array<string>;\n    handleSearch: (pkmn: string) => void;\n}\n\nconst SecondaryDisplay = ({name, evolutionChain, locationAreas, handleSearch}: SecondaryDisplayInterface)=> {\n    return (\n        <>\n            <div className=\"secondary-display\">\n                {evolutionChain && evolutionChain.length > 0 && (\n                    <>\n                        <span className=\"title\">{\"Evolutionary Chain\"}</span>\n                        <div className=\"evolution-chain\">\n                            {evolutionChain.map((evolution: any) => (\n                                <span \n                                    key={evolution.name}\n                                    className=\"pkmn\" \n                                    tabIndex={0} \n                                    onClick={() => handleSearch(evolution.name)}\n                                    onKeyUp={(e) => e.key===\"Enter\" && handleSearch(evolution.name)}\n                                >\n                                    <img src={evolution.image} alt={evolution.name} />\n                                    <span className=\"pokeName\">{evolution.name}</span>\n                                </span>\n                            ))}\n                        </div>\n                    </>\n                )}\n                <div className=\"locations\">\n                    {locationAreas && <span className=\"location-title\">\n                        <span className=\"pokemon-name\">{name}</span> can be found in the following areas: </span>}\n                    <span className=\"location-list\">\n                        {locationAreas?.map((location) => (<li key={location}>{location}</li>))}\n                    </span>\n                </div>\n            </div>\n            \n            <span className=\"screen-decoration\">\n                <div className=\"bar\" />\n                <div className=\"bar\" />\n            </span>\n        </>\n    );\n}\n\nexport default SecondaryDisplay;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {getDetailsById, searchByName} from '../../api/api';\nimport { addHistoryEntry } from '../../ducks/historyReducer';\nimport { EvolutionChainEntry } from '../../interfaces/EvolutionChainEntry';\nimport { Pokemon } from '../../interfaces/Pokemon';\nimport { PokemonMove } from '../../interfaces/PokemonMove';\nimport { PokemonSpecies } from '../../interfaces/PokemonSpecies';\nimport { RootState } from '../../store';\nimport DataEntry from '../dataentry/DataEntry';\nimport HistoryDisplay from '../historydisplay/HistoryDisplay';\nimport Display from '../maindisplay/MainDisplay';\nimport SecondaryDisplay from '../secondarydisplay/SecondaryDisplay';\nimport './Pokedex.scss'\n\nconst Pokedex = ()=> {\n    const { history } = useSelector((store: RootState) => store.history)\n    const dispatch = useDispatch();\n\n    // Hooks\n    const [search, setSearch] = useState<string>('')\n\n    // Large datasets\n    const [pokemonData, setPokemonData] = useState<Pokemon>()\n    const [speciesData, setSpeciesData] = useState<PokemonSpecies>();\n\n    // Specific derived data\n    const [evolutionChain, setEvolutionChain] = useState<Array<EvolutionChainEntry>>();\n    const [types, setTypes] = useState<Array<string>>();\n    const [moves, setMoves] = useState<Array<string>>();\n    const [abilities, setAbilities] = useState<Array<string>>();\n    const [locationAreas, setLocationAreas] = useState<Array<string>>();\n\n    // Additional API Calls\n    const getAbilities = async (abilities: Array<any>) => {\n        const abilityInfo =  await Promise.all(abilities.map(async (ability) => {\n            const info = await (await fetch(ability.ability.url)).json();\n            const nameEn = info.names.filter((name: Record<any, any>) => name.language.name==='en')    \n            return nameEn[0].name\n        }))\n        setAbilities(abilityInfo)\n    }\n\n    const getMoves = async (moves: Array<PokemonMove>) => {\n        const moveInfo =  await Promise.all(moves.map(async (move) => {\n            const info = await (await fetch(move.move.url)).json();\n            const nameEn = info.names.filter((name: Record<any, any>) => name.language.name==='en')    \n            return nameEn[0].name\n        }))\n        setMoves(moveInfo)\n    }\n\n    const getLocationInfo = async (locUrl: string) => {\n        const locationInfo = await (await fetch(locUrl)).json();\n        const listOfLocations = locationInfo.map((location: any) => {\n                return location.location_area.name.split('-').join(' ')\n        })\n        setLocationAreas(listOfLocations)\n    }\n\n    const getEvolutionChainByURL = async (url: string): Promise<any> => {\n        const data = await fetch(url)\n        const dataJson = await data.json();  \n        return dataJson;\n    }\n\n    const getEvolutionInfo = async (evolutionChain: any) => {\n        const evoInfo: Array<EvolutionChainEntry> =  await Promise.all(evolutionChain.map(async (evolution: any) => {\n            const info = await (await fetch(evolution.url)).json();\n            const nameEn = info.names.filter((name: Record<any, any>) => name.language.name==='en') \n            const image = await searchByName(nameEn[0].name);  \n            return {\n                name: nameEn[0].name,\n                image: image.sprites.front_default\n            }\n        }))\n        setEvolutionChain(evoInfo)\n   }\n\n   // UseEffects\n   useEffect(()=> {\n       if(pokemonData){\n           getDetailsById(pokemonData.id)\n               .then(response => setSpeciesData(response));\n           setTypes(pokemonData.types.map((type) => type.type.name))\n           getMoves(pokemonData.moves);\n           getAbilities(pokemonData.abilities);\n           getLocationInfo(pokemonData.location_area_encounters)\n       }\n   }, [pokemonData])\n\n   useEffect(()=> {\n        const pokemonChain: Array<any> = [];\n        const addEvolutionToArray = (chain: any) => {\n            pokemonChain.push(chain.species)\n            if(chain.evolves_to.length > 0){\n                addEvolutionToArray(chain.evolves_to[0])\n            }\n        }\n\n       if(speciesData){\n            getEvolutionChainByURL(speciesData.evolution_chain.url)\n               .then(evolutionChain => addEvolutionToArray(evolutionChain.chain) )\n               .then(() => getEvolutionInfo(pokemonChain))\n       }\n   }, [speciesData])\n       \n    // Event Handlers\n    const handleSearch = async (param = search)=> {\n        if(param){\n            const searchResult = await searchByName(param)\n            setPokemonData(searchResult)\n            if(!history.includes(param)){\n                dispatch(addHistoryEntry(param))\n            }\n        }\n    }\n\n    return (\n        <div className=\"pokedex\">\n            <div className=\"left-page\">\n                <TopPanelDecorations />\n                <Display pkmnData={pokemonData} speciesData={speciesData} types={types} moves={moves} abilities={abilities} />\n                <BottomPanelDecorations />\n            </div>\n            <div className=\"right-page\">\n                <SecondaryDisplay name={pokemonData?.name} evolutionChain={evolutionChain} locationAreas={locationAreas} handleSearch={handleSearch} />\n                <DataEntry setSearch={setSearch} handleSearch={handleSearch} />\n                <HistoryDisplay history={history} handleSearch={handleSearch} />\n            </div>\n        </div>\n    );\n}\n\nexport default Pokedex;\n\nconst TopPanelDecorations = () => (\n    <div className=\"left-panel--top-decoration\">\n        <div className=\"blue-light\" />\n        <div className=\"red-light small-button\" />\n        <div className=\"yellow-light small-button\" />\n        <div className=\"green-light small-button\" />\n    </div>\n)\n\nconst BottomPanelDecorations = () => (\n    <div className=\"left-panel--bottom-decoration\">\n        <div className=\"bar red-bar\" />\n        <div className=\"bar blue-bar\" />\n    </div>\n)","import './App.css';\nimport Pokedex from './components/pokedex/Pokedex';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Pokedex />\n      </header>\n    </div>\n  );\n}\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit'\nimport { createLogger } from 'redux-logger';\n\nimport historyReducer from './ducks/historyReducer'\n\nconst store = configureStore({\n  reducer: {\n    history: historyReducer,\n  },\n  middleware: [\n    createLogger(),\n  ]\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}